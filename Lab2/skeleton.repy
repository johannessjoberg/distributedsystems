def board(ip, port, sockobj, thiscommhandle, listencommhandle):
    msgheader = sockobj.recv(1024) # Receive message,
    print "Recieved msgheader: " + msgheader
    # React depending on message type: HTTP GET or POST, or MESSAGE.
    if msgheader.startswith( 'GET' ):
        sendHtml(sockobj, thiscommhandle)
    elif msgheader.startswith( 'POST' ):
        handlePost(msgheader)
        sendHtml(sockobj, thiscommhandle)
    #All propagation messages of data start with MESSAGE
    elif msgheader.startswith("MESSAGE"):
        print "Recieved MESSAGE: " + msgheader
        addBoard(msgheader[len("MESSAGE"):])
    elif msgheader.startswith("ELECTION"):
        stopcomm(thiscommhandle)
        election(msgheader)
    elif msgheader.startswith("RESULT"):
        coordination(msgheader)

#sends the html on the socket
def sendHtml(sockobj, thiscommhandle):
    #adding linebreak to every post in the board
    data = "<br>".join(getData())
    print "Data in board: " + data
    htmlresponse = """<!DOCTYPE html> <html> <head> <meta content="text/html; charset=utf-8" http-equiv="content-type"> <title>Blackboard Group #12</title> </head> <body> <h2> Board Content</h2> <p>"""
    htmlresponse += data
    htmlresponse += """</p> The leader is: <a href='http://"""
    htmlresponse += mycontext["leader"] + """:""" + str(mycontext["port"]) + """'>""" + mycontext["leader"] + """</a><br>Random election float of this vessel: """ + str(mycontext["electionNumber"])
    htmlresponse += """<h3>Submit to board<h3> <textarea rows="4" cols="50" name="comment" form="usrform"></textarea> <form action="" id="usrform" method="post"> <input type="submit"> </form> </body> </html>"""
    sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
        "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))
    stopcomm(thiscommhandle)

#goes through the serverlist and returns the "neighbouring vessel"
#if the vessel is last in the lists, it gets element 0 from the list
def getNextVessel():
    index=0
    for ip in mycontext["serverlist"]:
        if ip.strip() == str(getmyip()):
            if index == (len(mycontext["serverlist"]) - 1):
                return mycontext["serverlist"][0]
            else:
                return mycontext["serverlist"][index + 1]
        index += 1

#adds parameter data to the list data(who acts as the board)
def addDataToBoard(data):
    mycontext["lock"].acquire()
    mycontext["data"].append(data)
    mycontext["lock"].release()


def addBoard(data):
    mycontext["data"] = data.split(',')

#return the list data(who acts as the board)
def getData():
    return mycontext["data"]

#sends parameter data to every vessel in the list serverlist
#also adds to own boardlist
def sendDataToLeader(data):
    leader = mycontext["leader"]
    print "Sending data to leader [" + leader + "]:" + data
    socket = openconn(leader, mycontext["port"])
    socket.send(data)
    socket.close()

def sendBoardToAll():
    for server in mycontext["serverlist"]:
        print "Sending data to: " + server + ":" + str(mycontext["port"])
        if server != getmyip().strip():
            socket = openconn(server, mycontext["port"])
            boardString = ",".join(getData())
            socket.send("MESSAGE" + boardString)
            socket.close()

def handlePost(message):
    leader = mycontext["leader"]
    if str(leader) == str(getmyip()):
        lastIndex = message.rfind("comment=") + len("comment=")
        addDataToBoard(message[lastIndex:])
        sendBoardToAll()
    else:
        sendDataToLeader(message)

#list with IPs to the other vessels
def loadServers():
    servers = []
    for server in file("servers.txt"):
        servers.append(server.strip())
    return servers

def sendDataToNextVessle(data):
    socket = openconn(mycontext["nextvessel"].strip(), mycontext["port"])
    socket.send(data)
    socket.close()

def getMyElectionInfo():
    return str(mycontext["electionNumber"]) + "-" + str(getmyip())

def startElection(nextVessel):
    data = "ELECTION" + getMyElectionInfo() + ","
    sendDataToNextVessle(data)

def election(message):
    firstIndex = message.find("-") + 1
    lastIndex = message.find(",")
    electionStarterIp = message[firstIndex:lastIndex]
    listOfParticipants = []

    #if i'm the election starter
    if str(electionStarterIp) == str(getmyip()):
        print "ONE LOOP"
        #message starts with "ELECTION" => len("ELECTION") + 1
        message = message[len("ELECTION") + 1:]
        while len(message) > 0:
            numberSeparator = message.find("-")
            electionNumber = message[:numberSeparator]

            ipFirstSeparator = message.find("-") + 1
            ipLastSeparator = message.find(",")
            electionIp = message[ipFirstSeparator:ipLastSeparator]

            listOfParticipants.append((electionNumber,electionIp))

            index = message.find(",") + 1
            message = message[index:]

        leader = listOfParticipants[0]
        for participant in listOfParticipants:
            if float(participant[0]) > float(leader[0]):
                leader = participant

        #sets the calculated leader
        setLeader(leader[1])
        #starts the first coordination
        sendDataToNextVessle("RESULT" + leader[1] + "," + str(getmyip()))
        
    else:
        message += getMyElectionInfo() + ","
        sendDataToNextVessle(message)

def setLeader(leaderIp):
    mycontext["leader"] =  leaderIp
    print "Setting leader to: " + str(leaderIp)

def coordination(message):
    separator = message.find(",")
    leaderIp = message[len("RESULT"):separator]
    starterIp = message[separator+1:]
    if str(getmyip()) != str(starterIp):
        setLeader(leaderIp)
        sendDataToNextVessle(message)

if callfunc == 'initialize':
    if len(callargs) > 1:
        raise Exception("Too many call arguments")
    # Running remotely (assuming that we pass input argument only remotely):
    # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
    elif len(callargs) == 1:
        port = int(callargs[0])
        ip = getmyip()
  # Running locally:
  # whenever we get a connection on 127.0.0.1:12345 we'll call board
    else:
        port = 12345
        ip = '127.0.0.1'
    #saving the port in my context so that it can be used sendData function
    mycontext["port"] = port
    mycontext["serverlist"] = loadServers()
    mycontext["electionNumber"] = randomfloat()
    mycontext["leader"] = None
    mycontext["lock"] = getlock()

    #the board
    mycontext["data"] = []
    mycontext["nextvessel"] = getNextVessel()
    print "next vessel: " + str(mycontext["nextvessel"])
    print "our IP:" + str(getmyip())

    listencommhandle = waitforconn(ip,port,board)
    sleep(5)
    mycontext["leader"] = None
    startElection(mycontext["nextvessel"])
