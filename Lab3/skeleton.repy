def board(ip, port, sockobj, thiscommhandle, listencommhandle):
    msgheader = sockobj.recv(1024) # Receive message,
    # React depending on message type: HTTP GET or POST, or MESSAGE.
    if msgheader.startswith('GET'):
        sendHtml(sockobj)
        stopcomm(thiscommhandle)

    elif msgheader.startswith('POST'):
        stopcomm(thiscommhandle)
        sequenceNumber = getAndIncrementSequenceNumber()
        #sendHtml(sockobj, thiscommhandle)
        postMessage(msgheader, sequenceNumber)
        mycontext["messages_recieved"] = mycontext["messages_recieved"] + 1

    #All propagation messages of data start with MESSAGE
    elif msgheader.startswith("MESSAGE"):
        stopcomm(thiscommhandle)
        print "Recieved MESSAGE: " + msgheader
        handleMessage(msgheader[len("MESSAGE"):])
        mycontext["messages_recieved"] = mycontext["messages_recieved"] + 1

    messages_recieved = mycontext["messages_recieved"]
    expected_messages = mycontext["expected_messages"]
    print "Recieved " + str(messages_recieved) + " of "  + str(expected_messages) 
    print "starttime" + str(mycontext["starttime"])
    print "endtime" + str(getruntime())


def postMessage(msgheader, sequenceNumber):
    lastIndex = msgheader.rfind("comment=") + len("comment=")
    print "POSTING: " + msgheader[lastIndex:]
    sendDataToAllVessels(msgheader[lastIndex:], sequenceNumber)


def getAndIncrementSequenceNumber():
    mycontext["sequencelock"].acquire()
    mycontext["sequence"] = mycontext["sequence"] + 1
    sequence = mycontext["sequence"]
    mycontext["sequencelock"].release()
    return sequence


def updateNextSequenceNumber(lastKnown):
    mycontext["sequencelock"].acquire()
    if lastKnown > mycontext["sequence"]:
        mycontext["sequence"] = lastKnown
    mycontext["sequencelock"].release()


# sends parameter data to every vessel in the list vessellist
# also adds to own boardlist
def sendDataToAllVessels(data, sequenceNumber):
    message = data + "," + str(sequenceNumber) + "," + str(getmyip())
    print "Sending data: " + message
    setBoard(message)
    for vessel in mycontext["vessellist"]:
        socket = openconn(vessel, mycontext["port"])
        socket.send("MESSAGE" + message)
        socket.close()


# sends the html on the socket
def sendHtml(sockobj):
    #adding linebreak to every post in the board
    data = "<br>".join(getBoard())
    htmlresponse = """<!DOCTYPE html> <html> <head> <meta content="text/html; charset=utf-8" http-equiv="content-type"> <title>Blackboard Group #12</title> </head> <body> <h2> Board Content</h2> <p>"""
    htmlresponse += data
    htmlresponse += """</p> <br> <h3>Submit to board<h3> <textarea rows="4" cols="50" name="comment" form="usrform"></textarea> <form action="" id="usrform" method="post"> <input type="submit"> </form> </body> </html>"""
    sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
        "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))


# returns a list with IPs to the other vessels
def loadVessels():
    vessels = []
    for vessel in file("servers.txt"):
        if vessel.strip() != str(getmyip()):
            vessels.append(vessel.strip())
    return vessels


# adds parameter message to the list board
def setBoard(message):
    textSeparator = message.find(",")
    text = message[:textSeparator]

    firstSequenceSeparator = message.find(",") + 1
    lastSequenceSeparator = message.rfind(",")
    sequence = message[firstSequenceSeparator:lastSequenceSeparator]

    ipSeparator = message.rfind(",") + 1
    ip = message[ipSeparator:]

    mycontext["boardlock"].acquire()
    mycontext["board"].append((text,sequence,ip))
    mycontext["board"] = mergesort(mycontext["board"])
    mycontext["board"] = mycontext["board"][::-1]
    mycontext["boardlock"].release()


# sorts the list depending on the sequence variable
# if they have the sequence value, it's sort depending on the ip
def mergesort(x):
    result = []
    if len(x) < 2:
        return x
    mid = int(len(x)/2)
    y = mergesort(x[:mid])
    z = mergesort(x[mid:])
    i = 0
    j = 0
    while i < len(y) and j < len(z):
            if int(y[i][1]) > int(z[j][1]):
                result.append(z[j])
                j += 1
            elif int(y[i][1]) == int(z[j][1]):
                ip1 = y[i][2].replace(".","")
                ip2 = z[j][2].replace(".","")
                if int(ip1) > int(ip2):
                    result.append(z[j])
                    j += 1
                else:
                    result.append(y[i])
                    i += 1
            else:
                result.append(y[i])
                i += 1
    result += y[i:]
    result += z[j:]
    return result


# return the list board
def getBoard():
    textBoard = []
    for tuple in mycontext["board"]:
        textBoard.append("Sequence number: " + str(tuple[1]) + "message: " + tuple[0] + "ip: " + str(tuple[2]))
    return textBoard


def handleMessage(message):
    setBoard(message)
    firstIndex = message.find(",") + 1
    lastIndex = message.rfind(",")
    sequence = int(message[firstIndex:lastIndex])
    updateNextSequenceNumber(sequence)

if callfunc == 'initialize':
    if len(callargs) > 1:
        raise Exception("Too many call arguments")

    # Running remotely (assuming that we pass input argument only remotely):
    # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
    elif len(callargs) == 1:
        port = int(callargs[0])
        ip = getmyip()

    # Running locally:
    # whenever we get a connection on 127.0.0.1:12345 we'll call board
    else:
        port = 12345
        ip = '127.0.0.1'

# saving the port in my context so that it can be used sendData function
mycontext["port"] = port

# list with IPs to the other vessels
mycontext["vessellist"] = loadVessels()
mycontext["sequencelock"] = getlock()
mycontext["boardlock"] = getlock()
# the board
mycontext["board"] = []
mycontext["sortedboard"] = []

mycontext["sequence"] = 0
mycontext["starttime"] = getruntime()
mycontext["expected_messages"] = (len(mycontext["vessellist"]) + 1) * 3
mycontext["messages_recieved"] = 0
listencommhandle = waitforconn(ip,port,board)
