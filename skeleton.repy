def board(ip, port, sockobj, thiscommhandle, listencommhandle):
    msgheader = sockobj.recv(1024) # Receive message,
    print "Recieved msgheader: " + msgheader
    # React depending on message type: HTTP GET or POST, or MESSAGE.
    if msgheader.startswith( 'GET' ):
        sendHtml(sockobj, thiscommhandle)
    elif msgheader.startswith( 'POST' ):
        lastIndex = msgheader.rfind("comment=") + len("comment=")
        sendData(msgheader[lastIndex:])
        sendHtml(sockobj, thiscommhandle)
    elif msgheader.startswith("MESSAGE"):
        print "Recieved MESSAGE: " + msgheader
        addData(msgheader[len("MESSAGE"):])

def sendHtml(sockobj, thiscommhandle):
    #adding linebreak to every post in the board
    data = "<br>".join(getData())
    print "Data in board: " + data
    htmlresponse = """<!DOCTYPE html> <html> <head> <meta content="text/html; charset=utf-8" http-equiv="content-type"> <title>Blackboard Group #12</title> </head> <body> <h2> Board Content</h2> <p>"""
    htmlresponse += data
    htmlresponse += """</p> <br> <h3>Submit to board<h3> <textarea rows="4" cols="50" name="comment" form="usrform"></textarea> <form action="" id="usrform" method="post"> <input type="submit"> </form> </body> </html>"""
    sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
        "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))
    stopcomm(thiscommhandle)

if callfunc == 'initialize':
    if len(callargs) > 1:
        raise Exception("Too many call arguments")

    # Running remotely (assuming that we pass input argument only remotely):
    # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
    elif len(callargs) == 1:
        port = int(callargs[0])
        ip = getmyip()

  # Running locally:
  # whenever we get a connection on 127.0.0.1:12345 we'll call board
    else:
        port = 12345
        ip = '127.0.0.1'
mycontext["port"] = port

#list with IPs to the other vessels
mycontext["serverlist"] = []
for server in file("servers.txt"):
    #excluding our own IP from the serverlist
    if server.strip() != str(getmyip()):
        mycontext["serverlist"].append(server.strip())

#the board
mycontext["data"] = []

listencommhandle = waitforconn(ip,port,board)

#adding data the list who acts as the board
def addData(data):
    mycontext["data"].append(data)

#just returns the board
def getData():
    return mycontext["data"]

#sending data to every IP in serverlist
def sendData(data):
    addData(data)
    print "Sending data: " + data
    for server in mycontext["serverlist"]:
        print "Sending data to: " + server + ":" + str(mycontext["port"])
        socket = openconn(server, mycontext["port"])
        socket.send("MESSAGE" + data)
        socket.close()
        #sleep(.5)
