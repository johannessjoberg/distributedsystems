def board(ip, port, sockobj, thiscommhandle, listencommhandle):
    msgheader = sockobj.recv(1024) # Receive message,.
    if msgheader.startswith('GET'):
        sendHtml(sockobj)
        stopcomm(thiscommhandle)

    elif msgheader.startswith('POST'):
        postHandler(msgheader)
        sendHtml(sockobj, thiscommhandle)
        stopcomm(thiscommhandle)

    elif msgheader.startswith("GETBOARD"):
        stopcomm(thiscommhandle)
        print "Recieved MESSAGE: " + msgheader
        getBoardHandler(msgheader[len("GETBOARD"):])

    elif msgheader.startswith("WRITEBOARD"):
        #write to board

    elif msgheader.startswith("WRITELOCK"):
        writeLockHandler(ip, port, sockobj)
        stopcomm(thiscommhandle)

    elif msgheader.startswith("WRITEUNLOCK"):
        writeUnlockHandler(ip)
        stopcomm(thiscommhandle)

    else:
        print "Kaoz"

def getHandler():
    #read N/2 vessels -> readBoards
    #return html

def postHandler(message):

    #lock N/2+1 vessels
    lockVessels()

    mycontext["readlock"].acquire()
    #read N/2 vessels -> updateBoard
    mycontext["board"] = getUpdatedBoard()
    #add message
    mycontext["board"].append(message)

    mycontext["readlock"].release()

    #write to boards

    #unlock vessels
    unlockVessels()

def getBoardHandler():
    #lock board
    #read board
    #unlock board
    #return board

def writeBoardHandler(board):
    #lock board
    #write board
    #unlock board

def writeToBoards():


def writeLockHandler(ip, sockobj):
    if(mycontext['writelock'].acquire(False)):
        mycontext["iplockorigin"] = ip
        sockobj.send("success")
    else:
        sockobj.send("failed")

def writeUnlockHandler(ip):
    if(ip == mycontext["iplockorigin"]):
        mycontext['writelock'].release()

def lockVessels():
    for vessel in range(0, len(mycontext["vessellist"])/2 + 1):
        if(mycontext["vessellist"][vessel] != mycontext["ip"]):
            lock(mycontext["vessellist"][vessel])
        else:
            mycontext["writelock"].acquire()

def unlockVessels():
    for vessel in range(0, len(mycontext["vessellist"])/2 + 1):
        if(mycontext["vessellist"][vessel] != mycontext["ip"]):
            unlock(mycontext["vessellist"][vessel])
        else:
            mycontext["writelock"].release()

def lock(vesselIp):
    #lock vessel
    port = mycontext["port"]
    locked = False
    try:
        while(!locked):
            socket = openconn(vesselIp, port)
            socket.send("WRITELOCK")
            callback = socket.recv(512)
            if(str(callback) == "success")
                locked = True
            socket.close()
    except Exception, e:
        print str(e)

def unlock(vesselIp):
    #unlock vessel
    port = mycontext["port"]
    try:
        socket = openconn(vesselIp, port)
        socket.send("WRITEUNLOCK")
        socket.close()
    except Exception, e:
        print str(e)

def getUpdatedBoard():
    board = mycontext["board"]
    #reads N/2 boards to select newest
    for vessel in range(0, len(mycontext["vessellist"])/2 + 1):
        vesselBoard = getVesselBoard(mycontext["vessellist"][vessel])
        if len(vesselBoard) > len(board))
            board = vesselBoard

    return board

def getVesselBoard(vesselIp):
    port = mycontext["port"]
    board = []
    try:
        socket = openconn(vesselIp, port)
        socket.send("GETBOARD")
        board = tempsocket.recv(1024)
        socket.close()
    except Exception, e:
        print str(e)

    return board.split(",")
    















def postMessage(msgheader):
    lastIndex = msgheader.rfind("comment=") + len("comment=")
    print "POSTING: " + msgheader[lastIndex:]
    sendDataToAllVessels(msgheader[lastIndex:], sequenceNumber)


# sends parameter data to every vessel in the list vessellist
# also adds to own boardlist
def sendDataToAllVessels(data):
    message = data + "," + str(sequenceNumber) + "," + str(getmyip())
    print "Sending data: " + message
    setBoard(message)
    for vessel in mycontext["vessellist"]:
        socket = openconn(vessel, mycontext["port"])
        socket.send("MESSAGE" + message)
        socket.close()


# sends the html on the socket
def sendHtml(sockobj):
    #adding linebreak to every post in the board
    board = "<br>".join(getBoard())
    htmlresponse = """<!DOCTYPE html> <html> <head> <meta content="text/html; charset=utf-8" http-equiv="content-type"> <title>Blackboard Group #12</title> </head> <body> <h2> Board Content</h2> <p>"""
    htmlresponse += board
    htmlresponse += """</p> <br> <h3>Submit to board<h3> <textarea rows="4" cols="50" name="comment" form="usrform"></textarea> <form action="" id="usrform" method="post"> <input type="submit"> </form> </body> </html>"""
    sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
        "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))


# returns a list with IPs to the other vessels
def loadVessels():
    vessels = []
    for vessel in file("servers.txt"):
        if vessel.strip() != str(getmyip()):
            vessels.append(vessel.strip())
    return vessels


# adds parameter message to the list board
def setBoard(message):
    textSeparator = message.find(",")
    text = message[:textSeparator]

    firstSequenceSeparator = message.find(",") + 1
    lastSequenceSeparator = message.rfind(",")
    sequence = message[firstSequenceSeparator:lastSequenceSeparator]

    ipSeparator = message.rfind(",") + 1
    ip = message[ipSeparator:]

    mycontext["boardlock"].acquire()
    mycontext["board"].append((text,sequence,ip))
    mycontext["board"] = mergesort(mycontext["board"])
    mycontext["board"] = mycontext["board"][::-1]
    mycontext["boardlock"].release()

# return the list board
def getBoard():
    textBoard = []
    for tuple in mycontext["board"]:
        textBoard.append("Sequence number: " + str(tuple[1]) + "message: " + tuple[0] + "ip: " + str(tuple[2]))
    return textBoard


def handleMessage(message):
    setBoard(message)
    firstIndex = message.find(",") + 1
    lastIndex = message.rfind(",")

if callfunc == 'initialize':
    if len(callargs) > 1:
        raise Exception("Too many call arguments")

    # Running remotely (assuming that we pass input argument only remotely):
    # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
    elif len(callargs) == 1:
        port = int(callargs[0])
        ip = getmyip()

    # Running locally:
    # whenever we get a connection on 127.0.0.1:12345 we'll call board
    else:
        port = 12345
        ip = '127.0.0.1'

mycontext["ip"] = ip
# saving the port in my context so that it can be used sendData function
mycontext["port"] = port
# list with IPs to the other vessels
mycontext["vessellist"] = loadVessels()
#ip of the write lock origin
mycontext["iplockorigin"] = ""
#locks
mycontext["writelock"] = getlock()
mycontext["readlock"] = getlock()
# the board
mycontext["board"] = []

listencommhandle = waitforconn(ip,port,board)